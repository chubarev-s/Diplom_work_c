<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\program.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\program.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Jul 30 15:09:48 2024
<BR><P>
<H3>Maximum Stack Usage =        172 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Ethernet_ProcessLoop &rArr; ETH_TaskProcess &rArr; otpravka_eth &rArr; Ethernet_PC
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[b]">MIL_STD_1553B2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MIL_STD_1553B2_IRQHandler</a><BR>
 <LI><a href="#[c]">MIL_STD_1553B1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MIL_STD_1553B1_IRQHandler</a><BR>
 <LI><a href="#[d]">USB_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">USB_IRQHandler</a><BR>
 <LI><a href="#[f]">CAN2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">CAN2_IRQHandler</a><BR>
 <LI><a href="#[10]">DMA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DMA_IRQHandler</a><BR>
 <LI><a href="#[11]">UART1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">UART1_IRQHandler</a><BR>
 <LI><a href="#[12]">UART2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UART2_IRQHandler</a><BR>
 <LI><a href="#[13]">SSP1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SSP1_IRQHandler</a><BR>
 <LI><a href="#[14]">BUSY_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BUSY_IRQHandler</a><BR>
 <LI><a href="#[15]">ARINC429R_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ARINC429R_IRQHandler</a><BR>
 <LI><a href="#[16]">POWER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">POWER_IRQHandler</a><BR>
 <LI><a href="#[17]">WWDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">WWDG_IRQHandler</a><BR>
 <LI><a href="#[18]">TIMER4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">TIMER4_IRQHandler</a><BR>
 <LI><a href="#[1b]">TIMER3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">TIMER3_IRQHandler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1d]">ETHERNET_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ETHERNET_IRQHandler</a><BR>
 <LI><a href="#[1e]">SSP3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">SSP3_IRQHandler</a><BR>
 <LI><a href="#[1f]">SSP2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">SSP2_IRQHandler</a><BR>
 <LI><a href="#[20]">ARINC429T1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ARINC429T1_IRQHandler</a><BR>
 <LI><a href="#[21]">ARINC429T2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ARINC429T2_IRQHandler</a><BR>
 <LI><a href="#[22]">ARINC429T3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ARINC429T3_IRQHandler</a><BR>
 <LI><a href="#[23]">ARINC429T4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ARINC429T4_IRQHandler</a><BR>
 <LI><a href="#[24]">BKP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BKP_IRQHandler</a><BR>
 <LI><a href="#[25]">EXT_INT1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">EXT_INT1_IRQHandler</a><BR>
 <LI><a href="#[26]">EXT_INT2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">EXT_INT2_IRQHandler</a><BR>
 <LI><a href="#[27]">EXT_INT3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">EXT_INT3_IRQHandler</a><BR>
 <LI><a href="#[28]">EXT_INT4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">EXT_INT4_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[15]">ARINC429R_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[20]">ARINC429T1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[21]">ARINC429T2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[22]">ARINC429T3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[23]">ARINC429T4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[24]">BKP_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[14]">BUSY_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[e]">CAN1_IRQHandler</a> from mdr1986ve1t_it.o(i.CAN1_IRQHandler) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[f]">CAN2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[10]">DMA_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1d]">ETHERNET_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[25]">EXT_INT1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[26]">EXT_INT2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[27]">EXT_INT3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[28]">EXT_INT4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from mdr1986ve1t_it.o(i.HardFault_Handler) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[c]">MIL_STD_1553B1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[b]">MIL_STD_1553B2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[16]">POWER_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[13]">SSP1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1f]">SSP2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1e]">SSP3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_mdr1986ve1t.o(i.SystemInit) referenced from startup_mdr1986ve1t.o(.text)
 <LI><a href="#[19]">TIMER1_IRQHandler</a> from interruptions.o(i.TIMER1_IRQHandler) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1a]">TIMER2_IRQHandler</a> from interruptions.o(i.TIMER2_IRQHandler) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[1b]">TIMER3_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[18]">TIMER4_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[11]">UART1_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[12]">UART2_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[d]">USB_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_mdr1986ve1t.o(.text) referenced from startup_mdr1986ve1t.o(RESET)
 <LI><a href="#[2b]">__main</a> from __main.o(!!!main) referenced from startup_mdr1986ve1t.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[93]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[94]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[95]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[32]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[96]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[97]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[98]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[99]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[37]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[31]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[33]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Ethernet_ProcessLoop &rArr; ETH_TaskProcess &rArr; otpravka_eth &rArr; Ethernet_PC
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[36]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[38]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MIL_STD_1553B2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MIL_STD_1553B1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIL_STD_1553B1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>USB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BUSY_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUSY_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ARINC429R_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429R_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>POWER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ETHERNET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETHERNET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SSP2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ARINC429T1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ARINC429T2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ARINC429T3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ARINC429T4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARINC429T4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BKP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr1986ve1t.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[35]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bb]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bc]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>Buf_Clear</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, eth_can.o(i.Buf_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmition
</UL>

<P><STRONG><a name="[e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, mdr1986ve1t_it.o(i.CAN1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN1_IRQHandler &rArr; CAN_GetRawReceivedData
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetRawReceivedData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN_BRGInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mdr32f9qx_can.o(i.CAN_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortE_init
</UL>

<P><STRONG><a name="[42]"></a>CAN_BufferRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32f9qx_can.o(i.CAN_BufferRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_BufferRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmition
</UL>

<P><STRONG><a name="[92]"></a>CAN_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_can.o(i.CAN_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_can
</UL>

<P><STRONG><a name="[6e]"></a>CAN_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mdr32f9qx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortE_init
</UL>

<P><STRONG><a name="[91]"></a>CAN_FilterInit</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mdr32f9qx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_can
</UL>

<P><STRONG><a name="[3e]"></a>CAN_GetRawReceivedData</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mdr32f9qx_can.o(i.CAN_GetRawReceivedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_GetRawReceivedData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadBufferSFR
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>CAN_Init</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, mdr32f9qx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_can
</UL>

<P><STRONG><a name="[8f]"></a>CAN_StructInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_can
</UL>

<P><STRONG><a name="[43]"></a>CAN_Transmit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mdr32f9qx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmition
</UL>

<P><STRONG><a name="[40]"></a>CAN_Transmition</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, eth_can.o(i.CAN_Transmition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_Transmition &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BufferRelease
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TaskProcess
</UL>

<P><STRONG><a name="[8b]"></a>Clock_Init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, init.o(i.Clock_Init))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameTx
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameRx
</UL>

<P><STRONG><a name="[45]"></a>DMA_CtrlDataInit</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(i.DMA_CtrlDataInit))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[4c]"></a>DMA_DeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>

<P><STRONG><a name="[44]"></a>DMA_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, mdr32f9qx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>

<P><STRONG><a name="[48]"></a>DMA_Request</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(i.DMA_Request))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameTx
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameRx
</UL>

<P><STRONG><a name="[4d]"></a>DMA_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>

<P><STRONG><a name="[60]"></a>ETH_BRGInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_BRGInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[61]"></a>ETH_ClockCMD</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_ClockCMD))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[5c]"></a>ETH_ClockDeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_ClockDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[46]"></a>ETH_DMAFrameRx</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, mdr32f9qx_eth.o(i.ETH_DMAFrameRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_DMAFrameRx
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Request
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReceivedFrame
</UL>

<P><STRONG><a name="[49]"></a>ETH_DMAFrameTx</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mdr32f9qx_eth.o(i.ETH_DMAFrameTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_DMAFrameTx
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Request
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SendFrame
</UL>

<P><STRONG><a name="[4a]"></a>ETH_DMAPrepare</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, mdr32f9qx_eth.o(i.ETH_DMAPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_DMAPrepare &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[4e]"></a>ETH_DeInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mdr32f9qx_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_DeInit &rArr; ETH_PHY_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[59]"></a>ETH_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otpravka_eth
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TaskProcess
</UL>

<P><STRONG><a name="[51]"></a>ETH_GetPHYStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_GetPHYStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_Reset
</UL>

<P><STRONG><a name="[50]"></a>ETH_Init</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, mdr32f9qx_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ETH_Init &rArr; ETH_DMAPrepare &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[56]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[55]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[63]"></a>ETH_PHYCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_PHYCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[5f]"></a>ETH_PHY_ClockConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_PHY_ClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[4f]"></a>ETH_PHY_Reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdr32f9qx_eth.o(i.ETH_PHY_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_PHY_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetPHYStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[52]"></a>ETH_ReceivedFrame</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, mdr32f9qx_eth.o(i.ETH_ReceivedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETH_ReceivedFrame &rArr; ETH_DMAFrameRx
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameRx
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TaskProcess
</UL>

<P><STRONG><a name="[53]"></a>ETH_SendFrame</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, mdr32f9qx_eth.o(i.ETH_SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_SendFrame &rArr; ETH_DMAFrameTx
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAFrameTx
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otpravka_eth
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TaskProcess
</UL>

<P><STRONG><a name="[54]"></a>ETH_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mdr32f9qx_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Start
</UL>

<P><STRONG><a name="[62]"></a>ETH_StructInit</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, mdr32f9qx_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[57]"></a>ETH_TaskProcess</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, eth_can.o(i.ETH_TaskProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ETH_TaskProcess &rArr; otpravka_eth &rArr; Ethernet_PC
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SendFrame
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReceivedFrame
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetFlagStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otpravka_eth
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_FillFrameTX
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmition
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ProcessLoop
</UL>

<P><STRONG><a name="[58]"></a>Ethernet_FillFrameTX</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, eth_can.o(i.Ethernet_FillFrameTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Ethernet_FillFrameTX
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TaskProcess
</UL>

<P><STRONG><a name="[5b]"></a>Ethernet_Init</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, init.o(i.Ethernet_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Ethernet_Init &rArr; ETH_Init &rArr; ETH_DMAPrepare &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSE2status
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSE2config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_ClockConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYCmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ClockDeInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ClockCMD
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>Ethernet_PC</STRONG> (Thumb, 128 bytes, Stack size 92 bytes, eth_can.o(i.Ethernet_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Ethernet_PC
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otpravka_eth
</UL>

<P><STRONG><a name="[64]"></a>Ethernet_ProcessLoop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eth_can.o(i.Ethernet_ProcessLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Ethernet_ProcessLoop &rArr; ETH_TaskProcess &rArr; otpravka_eth &rArr; Ethernet_PC
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TaskProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Ethernet_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eth_can.o(i.Ethernet_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ethernet_Start &rArr; ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr1986ve1t_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler &rArr; Hard_fault_handler_c
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Hard_fault_handler_c</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, mdr1986ve1t_it.o(i.Hard_fault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_fault_handler_c
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[67]"></a>MAC_ID</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, eth_can.o(i.MAC_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAC_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>PORT_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_port.o(i.PORT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortE_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_init
</UL>

<P><STRONG><a name="[6b]"></a>PORT_Init</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, mdr32f9qx_port.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortE_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
</UL>

<P><STRONG><a name="[68]"></a>PORT_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_port.o(i.PORT_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_ID
</UL>

<P><STRONG><a name="[7a]"></a>PORT_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_port.o(i.PORT_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>PORT_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_port.o(i.PORT_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>PORT_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_port.o(i.PORT_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
</UL>

<P><STRONG><a name="[69]"></a>PortB_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, init.o(i.PortB_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PortB_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>PortD_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, init.o(i.PortD_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PortD_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>PortE_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, init.o(i.PortE_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PortE_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BRGInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_CPUclkSelection))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[70]"></a>RST_CLK_DeInit</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RST_CLK_DeInit &rArr; RST_CLK_WarmDeInit &rArr; RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSE2status
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
</UL>

<P><STRONG><a name="[5d]"></a>RST_CLK_HSE2config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_HSE2config))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[5e]"></a>RST_CLK_HSE2status</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_HSE2status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSE2status &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
</UL>

<P><STRONG><a name="[74]"></a>RST_CLK_HSIcmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_HSIcmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[73]"></a>RST_CLK_HSIstatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_HSIstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[4b]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_PCLKcmd))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortE_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAPrepare
</UL>

<P><STRONG><a name="[71]"></a>RST_CLK_WarmDeInit</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, mdr32f9qx_rst_clk.o(i.RST_CLK_WarmDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RST_CLK_WarmDeInit &rArr; RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[88]"></a>SSP_BRGInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mdr32f9qx_ssp.o(i.SSP_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
</UL>

<P><STRONG><a name="[8a]"></a>SSP_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(i.SSP_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
</UL>

<P><STRONG><a name="[86]"></a>SSP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(i.SSP_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
</UL>

<P><STRONG><a name="[89]"></a>SSP_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mdr32f9qx_ssp.o(i.SSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
</UL>

<P><STRONG><a name="[87]"></a>SSP_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(i.SSP_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
</UL>

<P><STRONG><a name="[76]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, system_mdr1986ve1t.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system_mdr1986ve1t.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, interruptions.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1_IRQHandler &rArr; TIMER_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetITStatus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, interruptions.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler &rArr; TIMER_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetITStatus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986ve1t.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIMER_BRGInit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(i.TIMER_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[7b]"></a>TIMER_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(i.TIMER_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>TIMER_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(i.TIMER_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[7f]"></a>TIMER_CntInit</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(i.TIMER_CntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[7e]"></a>TIMER_CntStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(i.TIMER_CntStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[78]"></a>TIMER_GetITStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(i.TIMER_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>TIMER_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(i.TIMER_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[7c]"></a>TimerInit</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, init.o(i.TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TimerInit &rArr; TIMER_CntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>U_1636RR52_Init</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, 1636rr52.o(i.U_1636RR52_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = U_1636RR52_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_StructInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_BRGInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>U_1636RR52_Read_Word</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, 1636rr52.o(i.U_1636RR52_Read_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = U_1636RR52_Read_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>main</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = main &rArr; Ethernet_ProcessLoop &rArr; ETH_TaskProcess &rArr; otpravka_eth &rArr; Ethernet_PC
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_can
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_ID
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_ProcessLoop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortE_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortB_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Read_Word
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_1636RR52_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5a]"></a>otpravka_eth</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, eth_can.o(i.otpravka_eth))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = otpravka_eth &rArr; Ethernet_PC
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SendFrame
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetFlagStatus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_PC
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TaskProcess
</UL>

<P><STRONG><a name="[8c]"></a>speed_can</STRONG> (Thumb, 446 bytes, Stack size 112 bytes, eth_can.o(i.speed_can))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = speed_can &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, init.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[81]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, init.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[3f]"></a>CAN_ReadBufferSFR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_can.o(i.CAN_ReadBufferSFR))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetRawReceivedData
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
